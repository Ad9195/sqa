---

- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "software_upgrade_05_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf:spine
  become: true

  vars:
  - log_dir_path: /var/log/regression/upgrade

  tasks:
    - file:
        path: "{{ log_dir_path }}"
        state: directory

    - name: Take backup of /etc/network/interfaces file
      copy:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.bck
        remote_src: true
        owner: root
        group: root
        mode: 0644

    - name: Take backup of ospfd.conf
      copy:
        src: /etc/quagga/ospfd.conf
        dest: /etc/quagga/ospfd.conf.bck
        remote_src: true
        owner: root
        group: root
        mode: 0644

    - name: Add ospf config in ospfd.conf
      blockinfile:
        path: /etc/quagga/ospfd.conf
        insertafter: "interface vnet"
        marker: ""
        block: "{{ lookup('file', '../../files/{{inventory_hostname}}/quagga_ospf_traffic.conf') }}"

    - name: Verify quagga ospf traffic
      test_ospf_routes:
        switch_name: "{{ inventory_hostname }}"
        config_file: "{{ lookup('file', '../../files/{{inventory_hostname}}/quagga_ospf_traffic.conf') }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ log_dir_path }}"
      register: module_out

    - name: Restore backup of /etc/network/interfaces
      copy:
        src: /etc/network/interfaces.bck
        dest: /etc/network/interfaces
        remote_src: true
        owner: root
        group: root
        mode: 0644

    - name: Remove backup file
      file:
        path: /etc/network/interfaces.bck
        state: absent

    - name: Restore backup of ospfd.conf
      copy:
        src: /etc/quagga/ospfd.conf.bck
        dest: /etc/quagga/ospfd.conf
        remote_src: true
        owner: root
        group: root
        mode: 0644

    - name: Remove backup file
      file:
        path: /etc/quagga/ospfd.conf.bck
        state: absent

    - command: "goes restart"

    - name: Download the goes coreboot installer file
      get_url:
        url: "{{ goes_coreboot_installer_url }}"
        dest: "{{ goes_installer_dir }}{{ goes_coreboot_installer_name }}"
        mode: 0755

    - name: Upgrade goes with coreboot
      goes_upgrade:
        switch_name: "{{ inventory_hostname }}"
        installer_dir: "{{ goes_installer_dir }}"
        installer_name: "{{ goes_coreboot_installer_name }}"
        coreboot: True
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ log_dir_path }}"
      register: module_out

    - name: reboot the switch
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for switch to come back after reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started port=22 delay=30 timeout=300 connect_timeout=15

    - command: "date +%Y%m%d%T"
      register: end_time

    - name: Fetch the log file
      slurp:
        src: "{{ module_out.log_file_path }}"
      register: logs

    - name: Store the test result in a hash in redis db on server emulator
      store_result_in_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        start_time: "{{ hostvars['server_emulator']['start_time'] }}"
        end_time: "{{ end_time.stdout }}"
        hash_dict: "{{ module_out.hash_dict }}"
        log_content: "{{ logs['content'] | b64decode }}"
      delegate_to: 127.0.0.1

    - shell: "goes hget platina package | grep version:"
      register: version_out

    - shell: "goes hget platina package | grep tag:"
      register: tag_out

    - name: Store GOES version and tag details in redis db
      store_goes_details:
        switch_name: "{{ inventory_hostname }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        version_details: "{{ version_out.stdout }}"
        tag_details: "{{ tag_out.stdout }}"
      delegate_to: 127.0.0.1


- hosts: server_emulator
  become: true
  tasks:
    - name: Get the test result from redis db
      get_test_result_from_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
      register: result

    - debug:
        msg: "Test case result: {{ result.result_status }}"

    - debug:
        msg: "Failure summary: {{ result.result_detail }}"

    - name: Get playbook run details
      set_fact:
        playbook_run: "{{ lookup('file', '{{ ansible_log_file_path }}') }}"

    - name: Store the ansible execution log in redis hash
      command: "redis-cli -p 9090 hset {{ hostvars['server_emulator']['hash_name'] }} 'result.playbook' '{{ playbook_run }}'"

    - file:
        path: "{{ ansible_log_file_path }}"
        state: absent
